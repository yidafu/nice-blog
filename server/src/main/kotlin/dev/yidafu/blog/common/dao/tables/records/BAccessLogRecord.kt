/*
 * This file is generated by jOOQ.
 */
package dev.yidafu.blog.common.dao.tables.records

import dev.yidafu.blog.common.dao.tables.BAccessLog
import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl
import java.time.LocalDateTime

/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class BAccessLogRecord() : UpdatableRecordImpl<BAccessLogRecord>(BAccessLog.B_ACCESS_LOG) {
  open var id: Long?
    set(value): Unit = set(0, value)
    get(): Long? = get(0) as Long?

  open var accessTime: LocalDateTime?
    set(value): Unit = set(1, value)
    get(): LocalDateTime? = get(1) as LocalDateTime?

  open var ip: String?
    set(value): Unit = set(2, value)
    get(): String? = get(2) as String?

  open var referrerUrl: String?
    set(value): Unit = set(3, value)
    get(): String? = get(3) as String?

  open var sourceUrl: String?
    set(value): Unit = set(4, value)
    get(): String? = get(4) as String?

  open var ua: String?
    set(value): Unit = set(5, value)
    get(): String? = get(5) as String?

  open var uid: String?
    set(value): Unit = set(6, value)
    get(): String? = get(6) as String?

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------

  override fun key(): Record1<Long?> = super.key() as Record1<Long?>

  /**
   * Create a detached, initialised BAccessLogRecord
   */
  constructor(
    id: Long? = null,
    accessTime: LocalDateTime? = null,
    ip: String? = null,
    referrerUrl: String? = null,
    sourceUrl: String? = null,
    ua: String? = null,
    uid: String? = null,
  ) : this() {
    this.id = id
    this.accessTime = accessTime
    this.ip = ip
    this.referrerUrl = referrerUrl
    this.sourceUrl = sourceUrl
    this.ua = ua
    this.uid = uid
    resetChangedOnNotNull()
  }
}
