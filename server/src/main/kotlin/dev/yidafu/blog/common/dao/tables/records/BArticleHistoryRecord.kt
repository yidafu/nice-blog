/*
 * This file is generated by jOOQ.
 */
package dev.yidafu.blog.common.dao.tables.records

import dev.yidafu.blog.common.dao.tables.BArticleHistory
import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl
import java.time.LocalDateTime

/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class BArticleHistoryRecord() : UpdatableRecordImpl<BArticleHistoryRecord>(BArticleHistory.B_ARTICLE_HISTORY) {
  open var id: Long?
    set(value): Unit = set(0, value)
    get(): Long? = get(0) as Long?

  open var createdAt: LocalDateTime?
    set(value): Unit = set(1, value)
    get(): LocalDateTime? = get(1) as LocalDateTime?

  open var updatedAt: LocalDateTime?
    set(value): Unit = set(2, value)
    get(): LocalDateTime? = get(2) as LocalDateTime?

  open var articleId: Long?
    set(value): Unit = set(3, value)
    get(): Long? = get(3) as Long?

  open var rawContent: String?
    set(value): Unit = set(4, value)
    get(): String? = get(4) as String?

  open var renderedContent: String?
    set(value): Unit = set(5, value)
    get(): String? = get(5) as String?

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------

  override fun key(): Record1<Long?> = super.key() as Record1<Long?>

  /**
   * Create a detached, initialised BArticleHistoryRecord
   */
  constructor(
    id: Long? = null,
    createdAt: LocalDateTime? = null,
    updatedAt: LocalDateTime? = null,
    articleId: Long? = null,
    rawContent: String? = null,
    renderedContent: String? = null,
  ) : this() {
    this.id = id
    this.createdAt = createdAt
    this.updatedAt = updatedAt
    this.articleId = articleId
    this.rawContent = rawContent
    this.renderedContent = renderedContent
    resetChangedOnNotNull()
  }
}
